
Step 1 — Bash Task: Generate prpcServiceUtils_export.properties


# Navigate to working directory
cd $(Build.SourcesDirectory)

# Replace placeholders in template with pipeline variables
envsubst < prpcServiceUtils_export.template.properties > prpcServiceUtils_export.properties

# Print the generated properties file for verification
echo "===== prpcServiceUtils_export.properties ====="
cat prpcServiceUtils_export.properties


Step 2 — Bash Task: Run Export

cd /data/prpcsrvutils/scripts/utils

./prpcServiceUtils.sh export \
  --propFile $(Build.SourcesDirectory)/prpcServiceUtils_export.properties \
  --artifactsDir /data/prpcsrvutils/export \
  --poolSize 10 \
  --requestTimeOut 600 \
  --jobIdFile /data/prpcsrvutils/logs/export_jobids.txt


Step 3 — Add Variable Group (Library → Variables)






Step 3 — Transform Template to Runtime Properties

In your pipeline, add a Bash task before running prpcServiceUtils.sh

# Replace placeholders in the template with pipeline variables
envsubst < prpcServiceUtils_export.template.properties > prpcServiceUtils_export.properties

# Print for debug
echo "===== Generated Properties ====="
cat prpcServiceUtils_export.properties


Step 4 — Run Export

sh /data/prpcsrvutils/scripts/utils/prpcServiceUtils.sh export -DprpcServiceUtils.properties=prpcServiceUtils_export.properties

-------------------------


# Fail on error
set -e

echo "Generating prpcServiceUtils_import_qa.properties from template..."

cd /data/prpcsrvutils/scripts/utils

# Replace placeholders in QA template with pipeline variables
envsubst < prpcServiceUtils_import_qa.template.properties > prpcServiceUtils_import_qa.properties

echo "DEBUG: Printing generated properties file"
cat prpcServiceUtils_import_qa.properties



q

export JAVA_HOME=$JAVA_PATH
export PATH=$JAVA_HOME/bin:$PATH

cd /data/prpcsrvutils/scripts/utils

# Ensure staging directory has the exported ZIP
echo "Looking for ZIP in $(Build.ArtifactStagingDirectory)..."
ls -lh $(Build.ArtifactStagingDirectory)

./prpcServiceUtils.sh import \
  --propFile /data/prpcsrvutils/scripts/utils/prpcServiceUtils_import_qa.properties \
  --artifactsDir $(Build.ArtifactStagingDirectory) \
  --poolSize 10 \
  --requestTimeOut 600 \
  --jobIdFile /data/prpcsrvutils/logs/import_jobids.txt
---------
JAVA_HOME=$JAVA_PATH
export PATH=$JAVA_HOME/bin:$PATH

cd /data/prpcsrvutils/scripts/utils

STAGING_DIR=$(Build.ArtifactStagingDirectory)

# Find the latest ZIP file in the staging directory
LATEST_ZIP=$(ls -t "$STAGING_DIR"/*.zip 2>/dev/null | head -n 1)

if [[ -z "$LATEST_ZIP" ]]; then
  echo "No ZIP files found in $STAGING_DIR"
  exit 1
fi

echo "Latest ZIP file found: $LATEST_ZIP"

# Run the import using the latest ZIP
./prpcServiceUtils.sh import \
  --propFile /data/prpcsrvutils/scripts/utils/prpcServiceUtils_import_qa.properties \
  --artifactsDir "$LATEST_ZIP" \
  --poolSize 10 \
  --requestTimeOut 600 \
  --jobIdFile /data/prpcsrvutils/logs/import_jobids.txt

cp $(Build.SourcesDirectory)/prpcServiceUtils_import_qa.properties /data/prpcsrvutils/scripts/utils/

------------------------


cd $(System.DefaultWorkingDirectory)
ls -ltr
cd */   # goes into first folder (usually your repo)
ls -ltr

envsubst < prpcServiceUtils_import_qa_template.properties > prpcServiceUtils_import_qa.properties



PROPS_FILE="$(System.DefaultWorkingDirectory)/ITF-Automation/prpcServiceUtils_import_qa_template.properties"

envsubst < "$PROPS_FILE" > prpcServiceUtils_import_qa.properties

echo "DEBUG: Printing generated properties file"
cat prpcServiceUtils_import_qa.properties

